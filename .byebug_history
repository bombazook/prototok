exit
Object.const_get opts.payload_class
opts.payload_class
try_get_existed opts.payload_class
payload_class opts
payload_klass
opts
self
self.options.payload_class
self.class.options.payload_class
payload_klass
payload_class
exit
decoded_token[:exp]
decoded_token['exp']
obj.each_pair{|k,v| puts "#{k} => #{v}"}
exit
Prototok::Token.decode(blob).to_h
exit
Prototok::Token.new.to_h
Prototok::Token.new.methods
Prototok::Token.new.each
Prototok::Token.new.keys
Prototok::Token.new
obj.entries
obj.keys
obj.each{|k,v| puts "#{k} - #{v}"}
obj.each{|k,v|}
exit
self.class.payload_class(**opts)
opts
exit
self.to_h.select{|k,v| !v.nil?}.merge(payload: any)
any
token
exit
self.to_h.select{|k,v| !v.nil?}
self.to_h
Prototok::Token.new(:exp => 1)
Prototok::Token.new(:exp => nil)
Prototok::Token.new self.to_h
Prototok::Token.new()
Prototok::Token.new(self.to_h.merge(payload: any))
Prototok::Token.new self.to_h.merge(payload: any)
Prototok::Toke.new self.to_h.merge(payload: any)
self.to_h.merge payload: any
self.to_h
self
exit
File.exist? File.expand_path path
File.expand_path path
File.exist? path
path
exit
temp.read
temp
temp.rewind
temp.save
temp.read
temp.write input
input
temp
emp
exit
File.read output_file
file.read output_file
output_file
exit
File.dirname "/Users/bombazook/dev/prototok/lib/prototok/encoders/protobuf/token.proto"
exit
File.dirname "/Users/bombazook/dev/prototok/lib/prototok/encoders/protobuf/token.proto"
File.path "/Users/bombazook/dev/prototok/lib/prototok/encoders/protobuf/token.proto"
File.pathname
output_file
path
exit
RbNaCl::Signatures::Ed25519::SigningKey.generate.to_bytes
RbNaCl::Signatures::Ed25519::SigningKey.generate
private_key.nil?
private_key
exit
cipher_args
encoded
exit
args.first.size
args.first
args
exit
args
